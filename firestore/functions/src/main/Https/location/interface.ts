export interface FirestoreLocation extends LocationResp {
  unix: number;
}

export interface LocationResp {
  uid: string;
  location: Location;
}

export interface Location {
  /**
   * `ISO-8601 UTC` timestamp provided by the native location API.
   */
  timestamp: string;
  /**
   * Distance-traveled in meters.
   * ℹ️
   * - [[BackgroundGeolocation.resetOdometer]]
   * - [[BackgroundGeolocation.getOdometer]]
   */
  odometer: number;
  /**
   * `true` if location was recorded while plugin is in the *moving* state.
   */
  is_moving: boolean;
  /**
   * Universally Unique Identifier.  You can use this to match locations recorded at your server with those in the logs.
   * It can also be used to ensure if the plugin has ever posted the same location *twice*.
   */
  uuid: string;
  /**
   * Event responsible for generating this location (`motionchange`, `providerchange`, `geofence`, `heartbeat`).
   */
  event?: string;
  /**
   * __[Android only]__.  Present (and `true`) if the location was generated by a "Fake Location" application.
   */
  mock?: boolean;
  /**
   * `true` if the plugin is currently waiting for the best possible location to arrive.  Samples are recorded when the plugin is transitioning between motion-states (*moving* vs *stationary*) or [[BackgroundGeolocation.getCurrentPosition]].
   * If you're manually posting location to your server, you should not persist these "samples".
   */
  sample?: boolean;
  /**
   * `latitude`, `longitude`, `speed`, `heading`, etc.
   */
  coords: Coords;
  /**
   * Device battery level when the location was recorded.
   */
  battery: Battery;
  /**
   * Optional arbitrary meta-data attached to this location.
   */
  extras?: Extras;
  /**
   * If this location was recorded due to a geofence transition, the corresponding geofence-event.
   */
  geofence?: GeofenceEvent;
  /**
   * Device motion-activity when this location was recorded (eg: `still`, `on_foot`, `in_vehicle`).
   */
  activity: MotionActivityEvent;
  /**
   * If this location was recorded due to [[ProviderChangeEvent]], this is a reference to the location-provider state.
   */
  provider?: ProviderChangeEvent;
}

interface ProviderChangeEvent {
  /**
   * `true` When device location-services are enabled.
   */
  enabled: boolean;
  /**
   * Authorization status of location-services.  For iOS, this will tell you if the user has enabled "Always" or "When in Use" authorization.
   *
   * | Name                                    | Platform      |
   * |-----------------------------------------|---------------|
   * | [[AUTHORIZATION_STATUS_NOT_DETERMINED]] | iOS only      |
   * | [[AUTHORIZATION_STATUS_RESTRICTED]]     | iOS only      |
   * | [[AUTHORIZATION_STATUS_DENIED]]         | iOS & Android |
   * | [[AUTHORIZATION_STATUS_ALWAYS]]         | iOS & Android |
   * | [[AUTHORIZATION_STATUS_WHEN_IN_USE]]    | iOS only      |
   *
   * ### ℹ️ Note:
   * - When Android location permission is **granted**, `status` == [[AUTHORIZATION_STATUS_ALWAYS]], otherwise [[AUTHORIZATION_STATUS_DENIED]].
   */
  status: AuthorizationStatus;
  /**
   * `true` if network geolocation provider is available.
   */
  network: boolean;
  /**
   * `true` if GPS geolocation provider is available.
   */
  gps: boolean;
  /**
   * __`[iOS 14+]`__ iOS 14 has introduced a new __`[Precise: On]`__ switch on the location authorization dialog allowing users to disable high-accuracy location.
   *
   * This attribute shows the state of that switch:
   * - Enabled:  [[BackgroundGeolocation.ACCURACY_AUTHORIZATION_FULL]].
   * - Disabled, [[BackgroundGeolocation.ACCURACY_AUTHORIZATION_REDUCED]].
   *
   * ![](https://dl.dropbox.com/s/dj93xpg51vspqk0/ios-14-precise-on.png?dl=1)
   *
   * @example
   *
   * ```javascript
   * BackgroundGeolocation.onProviderChange((event) => {
   *   let authorizationStatus = event.authorizationStatus;
   *   if (authorizationStatus == BackgroundGeolocation.ACCURACY_AUTHORIZATION_REDUCED) {
   *     // Supply "Purpose" key from Info.plist as 1st argument.
   *     BackgroundGeolocaiton.requestTemporaryFullAccuracy("Delivery").then((accuracyAuthorization) => {
   *       console.log("[requestTemporaryFullAccuracy]: ", accuracyAuthorization);
   *     }).catch((error) => {
   *       console.warn("[requestTemporaryFullAccuracy] ERROR:", error);
   *     });
   *   }
   * });
   * ```
   *
   * __See also:__
   * - [[BackgroundGeolocation.requestTemporaryFullAccuracy]]
   * - [What's new in iOS 14 `CoreLocation`](https://levelup.gitconnected.com/whats-new-with-corelocation-in-ios-14-bd28421c95c4)
   *
   */
  accuracyAuthorization: AccuracyAuthorization;
}

type AuthorizationStatus = 0 | 1 | 2 | 3 | 4;

type AccuracyAuthorization = 0 | 1;

interface MotionActivityEvent {
  /**
   * The reported device motion activity.
   *
   * | Activity Name  |
   * |----------------|
   * | `still`        |
   * | `walking`      |
   * | `on_foot`      |
   * | `running`      |
   * | `on_bicycle`   |
   * | `in_vehicle`   |
   */
  activity: string;
  /**
   * Confidence of the reported device motion activity in %.
   */
  confidence: number;
}

interface GeofenceEvent {
  /**
   * The identifier of the geofence which fired.
   */
  identifier: string;
  /**
   * The transition type: `ENTER`, `EXIT`, `DWELL`
   */
  action: string;
  /**
   * The [[Location]] where the geofence transition occurred.
   */
  location: Location;
  /**
   * Optional [[Geofence.extras]]
   */
  extras?: Extras;
}

interface Coords {
  /**
   * __[iOS Only]__ When the environment contains indoor-tracking hardware (eg: bluetooth beacons) the current floor within a building.
   */
  floor?: number;
  /**
   * Latitude of the location.
   */
  latitude: number;
  /**
   * Longitude of the location.
   */
  longitude: number;
  /**
   * Accuracy in meters.
   */
  accuracy: number;
  /**
   * Altitude above sea-level in meters.
   */
  altitude?: number;
  /**
   * Altitude accuracy in meters.
   *
   * If this location does not have `altitude_accuracy`, then `-1` is returned.
   *
   * ## iOS
   *
   * When this property contains 0 or a positive number, the value in the altitude property is plus or minus the specified number of meters. When this property contains a negative number, the value in the altitude property is invalid.
   *
   * Determining the [altitudeAccuracy] requires a device with GPS capabilities. Thus, on some devices, this property always contains a negative value.
   *
   * ## Android
   *
   * Android defines vertical accuracy at 68% confidence. Specifically, as 1-side of the 2-sided range above and below the estimated altitude reported by [altitude], within which there is a 68% probability of finding the true altitude.
   *
   * In the case where the underlying distribution is assumed Gaussian normal, this would be considered 1 standard deviation.
   *
   * For example, if [altitude] returns `150`, and [verticalAccuracy] returns `20` then there is a 68% probability of the true altitude being between `130` and `170` meters.
   *
   */
  altitude_accuracy?: number;
  /**
   * Heading in degrees.
   * ⚠️ Note:  Only present when location came from GPS.  `-1` otherwise.
   */
  heading?: number;
  /**
   * Heading accuracy in degrees.
   * ⚠️ Note:  Only present when location came from GPS.  `-1` otherwise.
   */
  heading_accuracy?: number;
  /**
   * Speed in meters / second.
   * ⚠️ Note:  Only present when location came from GPS.  `-1` otherwise.
   */
  speed?: number;
  /**
   * Speed accuracy in meters / second.
   * ⚠️ Note:  Only present when location came from GPS.  `-1` otherwise.
   */
  speed_accuracy?: number;
}

interface Battery {
  /**
   * `true` when device is plugged in to power.
   */
  is_charging: boolean;
  /**
   * Battery level.  `0.0` = empty; `1.0` = full charge.
   */
  level: number;
}

type Extras = {
  [key: string]:
    | string
    | null
    | number
    | boolean
    | Extras
    | string[]
    | number[]
    | boolean[]
    | Extras[];
};
